set nocompatible
set mouse=
let s:uname = substitute(system('uname'), "\n", "", "")

" disable modelines.
set nomodeline
set modelines=0

 " no beeps
set noerrorbells
set visualbell
set t_vb=

" Update term title but restore old title after leaving Vim.
set title
set titleold=

" When a bracket is inserted, briefly jump to the matching one.
set showmatch

" command line completion help
set wildmenu
set wildmode=longest:full,full

" short messages
set shortmess=aoOtTI

" whitespaces highlighting
set list
if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8') && version >= 700
  let &showbreak="↪ "
  let &listchars="tab:←-,trail:•,extends:⇉,precedes:⇇,nbsp:␣"
else
  let showbreak="> "
  set listchars=tab:>-,trail:~,extends:>,precedes:<,nbsp:_
endif
" see https://vi.stackexchange.com/a/19821
autocmd BufNewFile,BufRead * call matchadd('SpecialKey', '\s\+')
autocmd BufNewFile,BufRead * call matchadd('NonText', '\n\+')

" highlight search
set hlsearch
set incsearch

" gutter line number
set number
set numberwidth=3
" this is slowing down vim, but I like it.
set cursorline

" Minimal number of screen lines to keep above and below the cursor.
set scrolloff=3
" The minimal number of screen columns to keep to the left and to the right of
" the cursor if 'nowrap' is set.
set sidescrolloff=5
" Minimal number of lines to scroll when the cursor gets off the screen.
set scrolljump=1

" Start diff mode with vertical splits
set diffopt+=vertical

" completion menu
set completeopt=longest,menu,preview

" file format & encoding stuff
set fileencodings=utf-8,latin1,default
set fileformats=unix

" ' count of files to remember marks for,
" " max line count for each registers,
" h disable hlsearch when loading the viminfo file.
set viminfo='128,\"512,h
" : commands and search patterns history.
set history=128

" disable swap files and backups.
set noswapfile
set nobackup
set nowritebackup
" automatically save before :next etc. and reread changes
set autowrite
set autoread

" external command
set shell=/bin/sh
set grepprg=grep\ -nH\ $*

let mapleader = "\<space>"
" The time in milliseconds that is waited for a key code or mapped key
" sequence to complete.
set timeoutlen=250

" make backspace key more powerful
set backspace=indent,eol,start
" pasta without indent
set pastetoggle=<F10>

" tab and indent stuff
set shiftwidth=4
set tabstop=4
set expandtab
set smarttab
set autoindent
set preserveindent
set smartindent

" visual mode may be positioned at eol and include the character under the
" cursor.
set selection=inclusive
" allow virtual editing (cursor where there is no actual character) in Visual
" block mode only.
set virtualedit=block
" highlight with start without jumping, see https://stackoverflow.com/a/49944815/7936137
nnoremap <silent> * :let @/= '\<' . expand('<cword>') . '\>' <bar> set hls <cr>

" performance tricks.
set ttyfast
" Do not redraw screen in the middle of a macro. Makes them complete faster.
set lazyredraw

" folding
set foldcolumn=2
set foldmethod=marker

" abandon a buffer when it becomes hidden
set hidden
" buffer navigation
map      <C-l> <esc>:bnext!<return>
inoremap <C-l> <esc>:bnext!<return>
map      <C-h> <esc>:bprevious!<return>
inoremap <C-h> <esc>:bprevious!<return>
map      <C-q> <esc>:bdelete<return>

" split position
set splitright
set splitbelow
" split navigation
map <Tab>   <C-w>w
map <S-Tab> <C-w>W

" english spell check by default (:set spell)
setlocal spelllang=en

autocmd FileType text setlocal textwidth=78
autocmd FileType man    set nolist
" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   execute "normal! g`\"" |
            \ endif

" When editing a new file, load skeleton if any.
" If we find <+FILENAME+> replace it by the filename.
" If we find <+HEADERNAME+> replace it by the filename uppercase with .
"       replaced by _ (foo.h become FOO_H).
" If we find <+CLASSNAME+> replace it by the filename without the extensions.
autocmd BufNewFile *
            \ let skel = $HOME . "/.vim/skeletons/skel." . expand("%:e") |
            \ if filereadable(skel) |
            \   execute "silent! 0read " . skel |
            \   let fn = expand("%") |
            \   let hn = substitute(expand("%"), "\\w", "\\u\\0", "g") |
            \   let hn = substitute(hn, "\\.", "_", "g") |
            \   let hn = substitute(hn, "/", "_", "g") |
            \   let cn = expand("%:t:r") |
            \   %s/<+FILENAME+>/\=fn/Ige |
            \   %s/<+HEADERNAME+>/\=hn/Ige |
            \   %s/<+CLASSNAME+>/\=cn/Ige |
            \   unlet fn hn cn |
            \ endif |
            \ unlet skel |
            \ $delete |
            \ goto 1

" lightline & theme config
set laststatus=2
let g:lightline = {
    \ 'active': {
    \   'right': [ [ 'lineinfo' ],
    \              [ 'percent' ],
    \              [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ]
    \ },
    \ 'component': {
    \   'charvaluehex': '0x%B'
    \ },
    \ }
syntax sync minlines=256
syntax enable
filetype plugin indent on
if &t_Co == 256
    set background=dark
    set synmaxcol=256
    if &background == "dark"
        packadd gruvbox
        let g:gruvbox_italic = 1
        let g:gruvbox_invert_selection = 0
        " spell checking hack, see https://github.com/morhetz/gruvbox/issues/175
        let g:gruvbox_guisp_fallback = "bg"
        colorscheme gruvbox
        let g:lightline.colorscheme = 'gruvbox'
    else
        packadd papercolor
        colorscheme PaperColor
        let g:lightline.colorscheme = 'PaperColor'
    endif
    packadd lightline
    " since we use lightline, disable a bunch of stuff we don't need.
    set noruler
    set noshowcmd
    set noshowmode
else
    colorscheme elflord
    set ruler
    set showcmd
    set showmode
endif

if has("termguicolors")
    set termguicolors
    " vim hardcodes background color erase even if the terminfo file does
    " not contain bce (not to mention that libvte based terminals
    " incorrectly contain bce in their terminfo files). This causes
    " incorrect background rendering when using a color theme with a
    " background color.
    let &t_ut=''
    " vim / tmux bullshit, :help term
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" Load all packages on Vim >= 8
packloadall
" part of ViM 8.2 runtime
packadd matchit

" syntastic
let g:syntastic_enable_signs = 1
let g:syntastic_auto_loc_list = 1
" gist
let g:gist_detect_filetype = 1
let g:gist_show_privates = 1

" fzf
set runtimepath^=~/.local/fzf
let g:fzf_command_prefix = 'Fzf'
let g:fzf_layout = { 'down': '~80%' }
let g:fzf_preview_window = 'down:60%'
nmap <C-j> :GitFiles<return>

" <C-k> for searching (also selection in visual mode).
let s:searchopts = '--column --line-number --color=always'
" see https://github.com/junegunn/fzf.vim#example-git-grep-wrapper
command! -bang -nargs=* FzfGitGrep
    \ call fzf#vim#grep(printf('git grep %s -- %s', s:searchopts, shellescape(<q-args>)), 1, fzf#vim#with_preview(), <bang>0)
command! -bang -nargs=* FzfGitGrepWord
    \ call fzf#vim#grep(printf('git grep --word-regexp %s -- %s', s:searchopts, shellescape(<q-args>)), 1, fzf#vim#with_preview(), <bang>0)

if executable('fzf') && executable('rg')
    let s:rg = "rg --no-heading --smart-case --hidden --iglob '!.git/' --sort path"
    command! -bang -nargs=* RipGrep
        \ call fzf#vim#grep(printf('%s %s -- %s', s:rg, s:searchopts, shellescape(<q-args>)), 1, fzf#vim#with_preview(), <bang>0)
    command! -bang -nargs=* RipGrepWord
        \ call fzf#vim#grep(printf('%s --word-regexp %s -- %s', s:rg, s:searchopts, shellescape(<q-args>)), 1, fzf#vim#with_preview(), <bang>0)
    nmap <C-k> :RipGrep 
    vnoremap <C-k> y:RipGrepWord <C-r>0<return>
elseif executable('fzf')
    nmap <C-k> :FzfGitGrep 
    vnoremap <C-k> y:FzfGitGrepWord <C-r>0<return>
else " use fugitive
    nmap <C-k> :Ggrep 
    vnoremap <C-k> y:silent Ggrep <C-r>0<return>:copen<return>:redraw!<return>
endif

" NERDTree
let NERDTreeShowHidden=1
" combine NERDTreeFind with NERDTreeToggle,
" see https://stackoverflow.com/a/33465522
nmap <F2> :NERDTreeToggle %<return>

" per OS hacks.
if s:uname == "OpenBSD"
    let Tlist_Ctags_Cmd = "/usr/local/bin/ectags"
elseif s:uname == "Darwin"
    let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
    " https://www.reddit.com/r/vim/comments/a4yzyt/g_characters_prefixing_directory_and_file_names/
    let g:NERDTreeNodeDelimiter = "\u00a0"
endif
